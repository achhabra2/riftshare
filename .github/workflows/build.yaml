on:
  push:
    tags:
      - "v*"
jobs:
  package:
    strategy:
      matrix:
        go-version: [1.17]
        os: [macos-11, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set Version
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # - name: Get Wails dependencies
      #   run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      #   if: matrix.os == 'ubuntu-latest'
      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Build package macOS
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          echo "building on ${{ matrix.os }}"
          export LOG_LEVEL=debug
          export GODEBUG=1
          wails doctor
          wails build -platform darwin/amd64 -clean
          cd ./build/bin/
          zip riftshare-amd64.zip -r RiftShare.app
          rm -rf RiftShare.app
          mv riftshare-amd64.zip ../../
          cd ../../
          wails build -platform darwin/arm64 -clean
          cd ./build/bin/
          zip riftshare-arm64.zip -r RiftShare.app
          rm -rf RiftShare.app
          mv riftshare-arm64.zip ../../
          cd ../../
        if: matrix.os == 'macos-11'
      # - name: Build package linux
      #   run: |
      #     export PATH=$PATH:$(go env GOPATH)/bin
      #     echo "building on ${{ matrix.os }}"
      #     echo ${{ env.GITHUB_REF }}
      #     echo ${{ env.GITHUB_HEAD_REF }}
      #     mkdir -p ~/.wails
      #     cp wails.json ~/.wails/
      #     export LOG_LEVEL=debug
      #     export GODEBUG=1
      #     wails build
      #     tar -czvf riftshare.tar.gz ./build/riftshare
      #     # wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
      #     # chmod +x linuxdeploy*.AppImage
      #     # ls ./
      #     # ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/riftshare --desktop-file=riftshare.AppImage.desktop --icon-file=appicon--512.png --output appimage
      #   if: matrix.os == 'ubuntu-latest'
      - name: Build package windows
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          echo "building on ${{ matrix.os }}"
          choco install mingw
          wails build -platform windows/amd64 -clean
          Compress-Archive -Path .\build\bin\RiftShare.exe -DestinationPath .\riftshare.zip
        if: matrix.os == 'windows-latest'
      - name: upload artifacts macOS-AMD64
        uses: actions/upload-artifact@v2
        with:
          name: riftshare-macOS
          path: riftshare-*.zip
        if: matrix.os == 'macos-11'
      # - name: upload artifact macOS-ARM64
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: riftshare-macOS
      #     path: riftshare-arm64.zip
      #   if: matrix.os == 'macos-11'
      # - name: upload artifact linux
      #   uses: actions/upload-artifact@v2-preview
      #   with:
      #     name: riftshare-linux
      #     path: riftshare.tar.gz
      #   if: matrix.os == 'ubuntu-latest'
      #      - name: upload artifact linux appimage
      #        uses: actions/upload-artifact@v2-preview
      #        with:
      #          name: riftshare-linux-appimage
      #          path: riftshare-${{ env.VERSION }}-x86_64.AppImage
      #        if: matrix.os == 'ubuntu-latest'
      - name: upload artifact windows
        uses: actions/upload-artifact@v2
        with:
          name: riftshare-windows
          path: riftshare.zip
        if: matrix.os == 'windows-latest'

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Create Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: riftshare*.zip
      - name: Download macOS-AMD package
        uses: actions/download-artifact@v1
        with:
          name: riftshare-macOS
      - name: Upload macOS package to release
        id: upload-macOS-amd64-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./riftshare-macOS/riftshare-amd64.zip
          asset_name: riftshare_${{ github.ref }}_darwin_amd64.zip
          asset_content_type: application/octet-stream
      - name: Upload macOS-ARM package to release
        id: upload-macOS-arm64-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./riftshare-macOS/riftshare-arm64.zip
          asset_name: riftshare_${{ github.ref }}_darwin_arm64.zip
          asset_content_type: application/octet-stream
      # - name: Download linux package
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: riftshare-linux
      # - name: Upload Linux package to release
      #   id: upload-linux-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./riftshare-linux/riftshare.tar.gz
      #     asset_name: riftshare_${{ github.ref }}_linux_x86_64.tar.gz
      #     asset_content_type: application/octet-stream
      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: riftshare-windows
      - name: Upload Windows package to release
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./riftshare-windows/riftshare.zip
          asset_name: riftshare_${{ github.ref }}_windows_amd64.zip
          asset_content_type: application/octet-stream